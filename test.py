from data import *
from content import *
import numpy as np

print("Started. It may take some time.")
print("===========")

path="active1000"
dataset=data(path)

print("Shape of the original data:")
print(dataset.origin_data.shape)

print("Shape of the numberred data:")
print(dataset.data.shape)
print("Columns contain:")
print(dataset.data.columns)

print("===========")

print("Overview of the click matrix:")
print(dataset.click_matrix[:5,:5])

print("Overview of the question matrix:")
print(dataset.question[:5,:5])

print("See the location of the questions:")
print(dataset.location)

print((dataset.click_matrix==-1).sum())
print((dataset.click_matrix==-1).sum(1).mean())

# print("Evaluate:")
# pred=dataset.click_matrix
# dataset.evaluate(pred)

# dataset.show_statistics()

# print("===========")

# print("Content-based representation:")

# content_based=content(dataset.data,dataset.question,dataset.click_matrix,dataset.location,dataset.counter_location)
# category_rep=content_based.representation('category')
# title_rep=content_based.representation('title')
# click_rep=content_based.representation('click')
# time_rep=content_based.representation('active_time')
# category_matrix=content_based.category_matrix(content_based.data)

# print('The shape of category representation:')
# print(category_rep.shape)
# print('The shape of title representation:')
# print(title_rep.shape)
# print('The shape of click representation:')
# print(click_rep.shape)
# print('The shape of active time representation:')
# print(time_rep.shape)
# print('The shape of category matrix:')
# print(category_matrix.shape)

# print("===========")

# print("item-based collaborative recommendation:")
# pred=content_based.predict(content_based.question.transpose(), method='item', quick=True)
# r,ctr,arhr, MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred.transpose(),method="user-rank")
# print("Hit recall: {:.4f}, CTR: {:.4f}, ARHR: {:.4f}".format(r,ctr,arhr))
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("*******")
# MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred,method="error")
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("Prediction: Negative  Positive")
# print("||Not Read:{}".format(confusion_matrix[0]))
# print("||||||Read:{}\n".format(confusion_matrix[1]))

# print("===========")

# print("user-based collaborative recommendation:")
# pred=content_based.predict(content_based.question, method='user', quick=True)
# r,ctr,arhr, MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred.transpose(),method="user-rank")
# print("Hit recall: {:.4f}, CTR: {:.4f}, ARHR: {:.4f}".format(r,ctr,arhr))
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("*******")
# MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred,method="error")
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("Prediction: Negative  Positive")
# print("||Not Read:{}".format(confusion_matrix[0]))
# print("||||||Read:{}\n".format(confusion_matrix[1]))
# print("===========")

# print("Content-based nearest recommendation with TF-IDF category matrix (about 20min):")
# pred=content_based.predict(category_rep, method='item')
# r,ctr,arhr, MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred.transpose(),method="user-rank")
# print("Hit recall: {:.4f}, CTR: {:.4f}, ARHR: {:.4f}".format(r,ctr,arhr))
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("*******")
# MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred,method="error")
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("Prediction: Negative  Positive")
# print("||Not Read:{}".format(confusion_matrix[0]))
# print("||||||Read:{}\n".format(confusion_matrix[1]))
# print("===========")

# print("Content-based nearest recommendation with category matrix (about 20min):")
# pred=content_based.predict(category_matrix, method='item')
# r,ctr,arhr, MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred.transpose(),method="user-rank")
# print("Hit recall: {:.4f}, CTR: {:.4f}, ARHR: {:.4f}".format(r,ctr,arhr))
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("*******")
# MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred,method="error")
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("Prediction: Negative  Positive")
# print("||Not Read:{}".format(confusion_matrix[0]))
# print("||||||Read:{}\n".format(confusion_matrix[1]))
# print("===========")

# print("Content-based nearest recommendation with title matrix (about 20min):")
# pred=content_based.predict(title_rep, method='item')
# r,ctr,arhr, MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred.transpose(),method="user-rank")
# print("Hit recall: {:.4f}, CTR: {:.4f}, ARHR: {:.4f}".format(r,ctr,arhr))
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("*******")
# MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred,method="error")
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("Prediction: Negative  Positive")
# print("||Not Read:{}".format(confusion_matrix[0]))
# print("||||||Read:{}\n".format(confusion_matrix[1]))
# print("===========")

# print("Content-based nearest recommendation with click matrix (about 20min):")
# pred=content_based.predict(click_rep, method='item')
# r,ctr,arhr, MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred.transpose(),method="user-rank")
# print("Hit recall: {:.4f}, CTR: {:.4f}, ARHR: {:.4f}".format(r,ctr,arhr))
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("*******")
# MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred,method="error")
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("Prediction: Negative  Positive")
# print("||Not Read:{}".format(confusion_matrix[0]))
# print("||||||Read:{}\n".format(confusion_matrix[1]))
# print("===========")

# print("Content-based nearest recommendation with active time matrix (about 20min):")
# pred=content_based.predict(time_rep, method='item')
# r,ctr,arhr, MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred.transpose(),method="user-rank")
# print("Hit recall: {:.4f}, CTR: {:.4f}, ARHR: {:.4f}".format(r,ctr,arhr))
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("*******")
# MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred,method="error")
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("Prediction: Negative  Positive")
# print("||Not Read:{}".format(confusion_matrix[0]))
# print("||||||Read:{}\n".format(confusion_matrix[1]))
# print("===========")

# print("category (content-based) + item-based collaborative on active time:")
# pred=content_based.predict([category_rep,time_rep],method='item')
# r,ctr,arhr, MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred.transpose(),method="user-rank")
# print("Hit recall: {:.4f}, CTR: {:.4f}, ARHR: {:.4f}".format(r,ctr,arhr))
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("*******")
# MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred,method="error")
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("Prediction: Negative  Positive")
# print("||Not Read:{}".format(confusion_matrix[0]))
# print("||||||Read:{}\n".format(confusion_matrix[1]))
# print("===========")

# print("item-based collaborative on active time and click:")
# pred=content_based.predict([click_rep,time_rep],method='item')
# r,ctr,arhr, MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred.transpose(),method="user-rank")
# print("Hit recall: {:.4f}, CTR: {:.4f}, ARHR: {:.4f}".format(r,ctr,arhr))
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("*******")
# MSE, precision, recall, f1, confusion_matrix=content_based.evaluate(pred,method="error")
# print("MSE: {:.4f}, Precision: {:.4f}, Recall: {:.4f}, F1: {:.4f}".format(MSE,precision,recall,f1))
# print("Prediction: Negative  Positive")
# print("||Not Read:{}".format(confusion_matrix[0]))
# print("||||||Read:{}\n".format(confusion_matrix[1]))
# print("===========")